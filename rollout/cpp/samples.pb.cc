// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples.proto

#include "samples.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_samples_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_samples_2eproto;
namespace DRL {
class SampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample> _instance;
} _Sample_default_instance_;
class EpisodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Episode> _instance;
} _Episode_default_instance_;
class EmptyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyRequest> _instance;
} _EmptyRequest_default_instance_;
class ReadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRequest> _instance;
} _ReadRequest_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class ShmInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShmInfoResponse> _instance;
} _ShmInfoResponse_default_instance_;
class StatInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatInfoResponse> _instance;
} _StatInfoResponse_default_instance_;
}  // namespace DRL
static void InitDefaultsscc_info_EmptyRequest_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_EmptyRequest_default_instance_;
    new (ptr) ::DRL::EmptyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::EmptyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyRequest_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmptyRequest_samples_2eproto}, {}};

static void InitDefaultsscc_info_Episode_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_Episode_default_instance_;
    new (ptr) ::DRL::Episode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::Episode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Episode_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Episode_samples_2eproto}, {
      &scc_info_Sample_samples_2eproto.base,}};

static void InitDefaultsscc_info_ReadRequest_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_ReadRequest_default_instance_;
    new (ptr) ::DRL::ReadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::ReadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRequest_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRequest_samples_2eproto}, {}};

static void InitDefaultsscc_info_Sample_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_Sample_default_instance_;
    new (ptr) ::DRL::Sample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::Sample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Sample_samples_2eproto}, {}};

static void InitDefaultsscc_info_ShmInfoResponse_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_ShmInfoResponse_default_instance_;
    new (ptr) ::DRL::ShmInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::ShmInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShmInfoResponse_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShmInfoResponse_samples_2eproto}, {}};

static void InitDefaultsscc_info_StatInfoResponse_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_StatInfoResponse_default_instance_;
    new (ptr) ::DRL::StatInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::StatInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatInfoResponse_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatInfoResponse_samples_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DRL::_StatusResponse_default_instance_;
    new (ptr) ::DRL::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DRL::StatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusResponse_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusResponse_samples_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_samples_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_samples_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_samples_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_samples_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, state_),
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, action_),
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, reward_),
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, next_state_),
  PROTOBUF_FIELD_OFFSET(::DRL::Sample, mask_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::DRL::Episode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::Episode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::Episode, samples_),
  PROTOBUF_FIELD_OFFSET(::DRL::Episode, worker_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::DRL::EmptyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::EmptyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::EmptyRequest, placeholder_),
  0,
  PROTOBUF_FIELD_OFFSET(::DRL::ReadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::ReadRequest, batch_size_),
  0,
  PROTOBUF_FIELD_OFFSET(::DRL::StatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::StatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::DRL::StatusResponse, error_text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::DRL::ShmInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::ShmInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::ShmInfoResponse, shmid_),
  PROTOBUF_FIELD_OFFSET(::DRL::ShmInfoResponse, offset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DRL::StatInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRL::StatInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRL::StatInfoResponse, num_samples_),
  PROTOBUF_FIELD_OFFSET(::DRL::StatInfoResponse, num_reads_),
  PROTOBUF_FIELD_OFFSET(::DRL::StatInfoResponse, num_writes_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::DRL::Sample)},
  { 15, 22, sizeof(::DRL::Episode)},
  { 24, 30, sizeof(::DRL::EmptyRequest)},
  { 31, 37, sizeof(::DRL::ReadRequest)},
  { 38, 45, sizeof(::DRL::StatusResponse)},
  { 47, 54, sizeof(::DRL::ShmInfoResponse)},
  { 56, 64, sizeof(::DRL::StatInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_Sample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_Episode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_EmptyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_ReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_ShmInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRL::_StatInfoResponse_default_instance_),
};

const char descriptor_table_protodef_samples_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsamples.proto\022\003DRL\"k\n\006Sample\022\021\n\005state\030"
  "\001 \003(\002B\002\020\001\022\022\n\006action\030\002 \003(\002B\002\020\001\022\021\n\006reward\030"
  "\003 \002(\002:\0010\022\026\n\nnext_state\030\004 \003(\002B\002\020\001\022\017\n\004mask"
  "\030\005 \001(\002:\0011\":\n\007Episode\022\034\n\007samples\030\001 \003(\0132\013."
  "DRL.Sample\022\021\n\tworker_id\030\002 \001(\005\"#\n\014EmptyRe"
  "quest\022\023\n\013placeholder\030\001 \001(\005\"!\n\013ReadReques"
  "t\022\022\n\nbatch_size\030\001 \001(\005\"4\n\016StatusResponse\022"
  "\016\n\006status\030\001 \002(\005\022\022\n\nerror_text\030\002 \001(\t\"0\n\017S"
  "hmInfoResponse\022\r\n\005shmid\030\001 \002(\005\022\016\n\006offset\030"
  "\002 \001(\005\"N\n\020StatInfoResponse\022\023\n\013num_samples"
  "\030\001 \002(\003\022\021\n\tnum_reads\030\002 \002(\005\022\022\n\nnum_writes\030"
  "\003 \002(\0052\226\003\n\016MempoolService\0224\n\nHelloWorld\022\021"
  ".DRL.EmptyRequest\032\023.DRL.StatusResponse\0220"
  "\n\013SaveSamples\022\014.DRL.Episode\032\023.DRL.Status"
  "Response\0224\n\013ReadSamples\022\020.DRL.ReadReques"
  "t\032\023.DRL.StatusResponse\0228\n\016CloseShmBuffer"
  "\022\021.DRL.EmptyRequest\032\023.DRL.StatusResponse"
  "\0227\n\013GetStatInfo\022\021.DRL.EmptyRequest\032\025.DRL"
  ".StatInfoResponse\0225\n\nGetShmInfo\022\021.DRL.Em"
  "ptyRequest\032\024.DRL.ShmInfoResponse\022<\n\022Down"
  "loadModelFiles\022\021.DRL.EmptyRequest\032\023.DRL."
  "StatusResponseB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_samples_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_samples_2eproto_sccs[7] = {
  &scc_info_EmptyRequest_samples_2eproto.base,
  &scc_info_Episode_samples_2eproto.base,
  &scc_info_ReadRequest_samples_2eproto.base,
  &scc_info_Sample_samples_2eproto.base,
  &scc_info_ShmInfoResponse_samples_2eproto.base,
  &scc_info_StatInfoResponse_samples_2eproto.base,
  &scc_info_StatusResponse_samples_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_samples_2eproto_once;
static bool descriptor_table_samples_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_samples_2eproto = {
  &descriptor_table_samples_2eproto_initialized, descriptor_table_protodef_samples_2eproto, "samples.proto", 859,
  &descriptor_table_samples_2eproto_once, descriptor_table_samples_2eproto_sccs, descriptor_table_samples_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_samples_2eproto::offsets,
  file_level_metadata_samples_2eproto, 7, file_level_enum_descriptors_samples_2eproto, file_level_service_descriptors_samples_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_samples_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_samples_2eproto), true);
namespace DRL {

// ===================================================================

void Sample::InitAsDefaultInstance() {
}
class Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample>()._has_bits_);
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Sample::Sample()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      state_(from.state_),
      action_(from.action_),
      next_state_(from.next_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(mask_));
  // @@protoc_insertion_point(copy_constructor:DRL.Sample)
}

void Sample::SharedCtor() {
  reward_ = 0;
  mask_ = 1;
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:DRL.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
}

void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample& Sample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_samples_2eproto.base);
  return *internal_default_instance();
}


void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  action_.Clear();
  next_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    reward_ = 0;
    mask_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float state = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float action = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_action(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_action(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float reward = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float next_state = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_next_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_next_state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mask = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float state = 1 [packed = true];
  if (this->_internal_state_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_state(), target);
  }

  // repeated float action = 2 [packed = true];
  if (this->_internal_action_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_action(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required float reward = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_reward(), target);
  }

  // repeated float next_state = 4 [packed = true];
  if (this->_internal_next_state_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_next_state(), target);
  }

  // optional float mask = 5 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.Sample)
  size_t total_size = 0;

  // required float reward = 3 [default = 0];
  if (_internal_has_reward()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float state = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_state_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float action = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_action_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _action_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float next_state = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_next_state_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _next_state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional float mask = 5 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.Sample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.Sample)
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  action_.MergeFrom(from.action_);
  next_state_.MergeFrom(from.next_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000002u) {
      mask_ = from.mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_.InternalSwap(&other->state_);
  action_.InternalSwap(&other->action_);
  next_state_.InternalSwap(&other->next_state_);
  swap(reward_, other->reward_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Episode::InitAsDefaultInstance() {
}
class Episode::_Internal {
 public:
  using HasBits = decltype(std::declval<Episode>()._has_bits_);
  static void set_has_worker_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Episode::Episode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.Episode)
}
Episode::Episode(const Episode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_id_ = from.worker_id_;
  // @@protoc_insertion_point(copy_constructor:DRL.Episode)
}

void Episode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Episode_samples_2eproto.base);
  worker_id_ = 0;
}

Episode::~Episode() {
  // @@protoc_insertion_point(destructor:DRL.Episode)
  SharedDtor();
}

void Episode::SharedDtor() {
}

void Episode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Episode& Episode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Episode_samples_2eproto.base);
  return *internal_default_instance();
}


void Episode::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.Episode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  worker_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Episode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRL.Sample samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 worker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_worker_id(&has_bits);
          worker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Episode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.Episode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRL.Sample samples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_samples(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 worker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.Episode)
  return target;
}

size_t Episode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.Episode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRL.Sample samples = 1;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 worker_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Episode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.Episode)
  GOOGLE_DCHECK_NE(&from, this);
  const Episode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Episode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.Episode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.Episode)
    MergeFrom(*source);
  }
}

void Episode::MergeFrom(const Episode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.Episode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  if (from._internal_has_worker_id()) {
    _internal_set_worker_id(from._internal_worker_id());
  }
}

void Episode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.Episode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Episode::CopyFrom(const Episode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.Episode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Episode::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(samples_)) return false;
  return true;
}

void Episode::InternalSwap(Episode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  samples_.InternalSwap(&other->samples_);
  swap(worker_id_, other->worker_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Episode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyRequest::InitAsDefaultInstance() {
}
class EmptyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EmptyRequest>()._has_bits_);
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EmptyRequest::EmptyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.EmptyRequest)
}
EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  placeholder_ = from.placeholder_;
  // @@protoc_insertion_point(copy_constructor:DRL.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
  placeholder_ = 0;
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:DRL.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
}

void EmptyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyRequest& EmptyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyRequest_samples_2eproto.base);
  return *internal_default_instance();
}


void EmptyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholder_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EmptyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 placeholder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_placeholder(&has_bits);
          placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 placeholder = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_placeholder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.EmptyRequest)
  return target;
}

size_t EmptyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.EmptyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 placeholder = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_placeholder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.EmptyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.EmptyRequest)
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_placeholder()) {
    _internal_set_placeholder(from._internal_placeholder());
  }
}

void EmptyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {
  return true;
}

void EmptyRequest::InternalSwap(EmptyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(placeholder_, other->placeholder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRequest::InitAsDefaultInstance() {
}
class ReadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadRequest>()._has_bits_);
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReadRequest::ReadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:DRL.ReadRequest)
}

void ReadRequest::SharedCtor() {
  batch_size_ = 0;
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:DRL.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
}

void ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRequest& ReadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRequest_samples_2eproto.base);
  return *internal_default_instance();
}


void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.ReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 batch_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.ReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_batch_size()) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void ReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
}
class StatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatusResponse::StatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_text()) {
    error_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:DRL.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusResponse_samples_2eproto.base);
  error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:DRL.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  error_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_samples_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_text_.ClearNonDefaultToEmptyNoArena();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRL.StatusResponse.error_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DRL.StatusResponse.error_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.StatusResponse)
  size_t total_size = 0;

  // required int32 status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_text = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_text_.Swap(&other->error_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShmInfoResponse::InitAsDefaultInstance() {
}
class ShmInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ShmInfoResponse>()._has_bits_);
  static void set_has_shmid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShmInfoResponse::ShmInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.ShmInfoResponse)
}
ShmInfoResponse::ShmInfoResponse(const ShmInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shmid_, &from.shmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&shmid_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:DRL.ShmInfoResponse)
}

void ShmInfoResponse::SharedCtor() {
  ::memset(&shmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&shmid_)) + sizeof(offset_));
}

ShmInfoResponse::~ShmInfoResponse() {
  // @@protoc_insertion_point(destructor:DRL.ShmInfoResponse)
  SharedDtor();
}

void ShmInfoResponse::SharedDtor() {
}

void ShmInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShmInfoResponse& ShmInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShmInfoResponse_samples_2eproto.base);
  return *internal_default_instance();
}


void ShmInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.ShmInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shmid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&shmid_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ShmInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 shmid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shmid(&has_bits);
          shmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShmInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.ShmInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 shmid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shmid(), target);
  }

  // optional int32 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.ShmInfoResponse)
  return target;
}

size_t ShmInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.ShmInfoResponse)
  size_t total_size = 0;

  // required int32 shmid = 1;
  if (_internal_has_shmid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shmid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 offset = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShmInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.ShmInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShmInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.ShmInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.ShmInfoResponse)
    MergeFrom(*source);
  }
}

void ShmInfoResponse::MergeFrom(const ShmInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.ShmInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shmid_ = from.shmid_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.ShmInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmInfoResponse::CopyFrom(const ShmInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.ShmInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShmInfoResponse::InternalSwap(ShmInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shmid_, other->shmid_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatInfoResponse::InitAsDefaultInstance() {
}
class StatInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StatInfoResponse>()._has_bits_);
  static void set_has_num_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_reads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_writes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StatInfoResponse::StatInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DRL.StatInfoResponse)
}
StatInfoResponse::StatInfoResponse(const StatInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_samples_, &from.num_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_writes_) -
    reinterpret_cast<char*>(&num_samples_)) + sizeof(num_writes_));
  // @@protoc_insertion_point(copy_constructor:DRL.StatInfoResponse)
}

void StatInfoResponse::SharedCtor() {
  ::memset(&num_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_writes_) -
      reinterpret_cast<char*>(&num_samples_)) + sizeof(num_writes_));
}

StatInfoResponse::~StatInfoResponse() {
  // @@protoc_insertion_point(destructor:DRL.StatInfoResponse)
  SharedDtor();
}

void StatInfoResponse::SharedDtor() {
}

void StatInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatInfoResponse& StatInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatInfoResponse_samples_2eproto.base);
  return *internal_default_instance();
}


void StatInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DRL.StatInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_samples_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_writes_) -
        reinterpret_cast<char*>(&num_samples_)) + sizeof(num_writes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StatInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 num_samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_samples(&has_bits);
          num_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_reads(&has_bits);
          num_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_writes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_writes(&has_bits);
          num_writes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRL.StatInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 num_samples = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_samples(), target);
  }

  // required int32 num_reads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_reads(), target);
  }

  // required int32 num_writes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_writes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRL.StatInfoResponse)
  return target;
}

size_t StatInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DRL.StatInfoResponse)
  size_t total_size = 0;

  if (_internal_has_num_samples()) {
    // required int64 num_samples = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_samples());
  }

  if (_internal_has_num_reads()) {
    // required int32 num_reads = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_reads());
  }

  if (_internal_has_num_writes()) {
    // required int32 num_writes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_writes());
  }

  return total_size;
}
size_t StatInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRL.StatInfoResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 num_samples = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_samples());

    // required int32 num_reads = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_reads());

    // required int32 num_writes = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_writes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRL.StatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRL.StatInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRL.StatInfoResponse)
    MergeFrom(*source);
  }
}

void StatInfoResponse::MergeFrom(const StatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRL.StatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_samples_ = from.num_samples_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_reads_ = from.num_reads_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_writes_ = from.num_writes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRL.StatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatInfoResponse::CopyFrom(const StatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRL.StatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StatInfoResponse::InternalSwap(StatInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_samples_, other->num_samples_);
  swap(num_reads_, other->num_reads_);
  swap(num_writes_, other->num_writes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MempoolService::~MempoolService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MempoolService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_samples_2eproto);
  return file_level_service_descriptors_samples_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MempoolService::GetDescriptor() {
  return descriptor();
}

void MempoolService::HelloWorld(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::EmptyRequest*,
                         ::DRL::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HelloWorld() not implemented.");
  done->Run();
}

void MempoolService::SaveSamples(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::Episode*,
                         ::DRL::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveSamples() not implemented.");
  done->Run();
}

void MempoolService::ReadSamples(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::ReadRequest*,
                         ::DRL::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReadSamples() not implemented.");
  done->Run();
}

void MempoolService::CloseShmBuffer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::EmptyRequest*,
                         ::DRL::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CloseShmBuffer() not implemented.");
  done->Run();
}

void MempoolService::GetStatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::EmptyRequest*,
                         ::DRL::StatInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStatInfo() not implemented.");
  done->Run();
}

void MempoolService::GetShmInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::EmptyRequest*,
                         ::DRL::ShmInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetShmInfo() not implemented.");
  done->Run();
}

void MempoolService::DownloadModelFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DRL::EmptyRequest*,
                         ::DRL::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DownloadModelFiles() not implemented.");
  done->Run();
}

void MempoolService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_samples_2eproto[0]);
  switch(method->index()) {
    case 0:
      HelloWorld(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::EmptyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatusResponse*>(
                 response),
             done);
      break;
    case 1:
      SaveSamples(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::Episode*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatusResponse*>(
                 response),
             done);
      break;
    case 2:
      ReadSamples(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::ReadRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatusResponse*>(
                 response),
             done);
      break;
    case 3:
      CloseShmBuffer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::EmptyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatusResponse*>(
                 response),
             done);
      break;
    case 4:
      GetStatInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::EmptyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatInfoResponse*>(
                 response),
             done);
      break;
    case 5:
      GetShmInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::EmptyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::ShmInfoResponse*>(
                 response),
             done);
      break;
    case 6:
      DownloadModelFiles(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DRL::EmptyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DRL::StatusResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MempoolService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DRL::EmptyRequest::default_instance();
    case 1:
      return ::DRL::Episode::default_instance();
    case 2:
      return ::DRL::ReadRequest::default_instance();
    case 3:
      return ::DRL::EmptyRequest::default_instance();
    case 4:
      return ::DRL::EmptyRequest::default_instance();
    case 5:
      return ::DRL::EmptyRequest::default_instance();
    case 6:
      return ::DRL::EmptyRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MempoolService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DRL::StatusResponse::default_instance();
    case 1:
      return ::DRL::StatusResponse::default_instance();
    case 2:
      return ::DRL::StatusResponse::default_instance();
    case 3:
      return ::DRL::StatusResponse::default_instance();
    case 4:
      return ::DRL::StatInfoResponse::default_instance();
    case 5:
      return ::DRL::ShmInfoResponse::default_instance();
    case 6:
      return ::DRL::StatusResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MempoolService_Stub::MempoolService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MempoolService_Stub::MempoolService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MempoolService_Stub::~MempoolService_Stub() {
  if (owns_channel_) delete channel_;
}

void MempoolService_Stub::HelloWorld(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::EmptyRequest* request,
                              ::DRL::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MempoolService_Stub::SaveSamples(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::Episode* request,
                              ::DRL::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MempoolService_Stub::ReadSamples(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::ReadRequest* request,
                              ::DRL::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MempoolService_Stub::CloseShmBuffer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::EmptyRequest* request,
                              ::DRL::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MempoolService_Stub::GetStatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::EmptyRequest* request,
                              ::DRL::StatInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MempoolService_Stub::GetShmInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::EmptyRequest* request,
                              ::DRL::ShmInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MempoolService_Stub::DownloadModelFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DRL::EmptyRequest* request,
                              ::DRL::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DRL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DRL::Sample* Arena::CreateMaybeMessage< ::DRL::Sample >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::Episode* Arena::CreateMaybeMessage< ::DRL::Episode >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::Episode >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::EmptyRequest* Arena::CreateMaybeMessage< ::DRL::EmptyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::EmptyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::ReadRequest* Arena::CreateMaybeMessage< ::DRL::ReadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::ReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::StatusResponse* Arena::CreateMaybeMessage< ::DRL::StatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::ShmInfoResponse* Arena::CreateMaybeMessage< ::DRL::ShmInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::ShmInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DRL::StatInfoResponse* Arena::CreateMaybeMessage< ::DRL::StatInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DRL::StatInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
